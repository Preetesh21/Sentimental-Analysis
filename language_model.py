# -*- coding: utf-8 -*-
"""language_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oZRzzaAdaBN5Oq8fNHzCANd2W51hdrQF
"""

from keras.preprocessing.text import Tokenizer
from keras.utils import to_categorical
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential,Model
from keras.layers import *

import numpy as np

with open('/content/Bean.txt', 'r',encoding='utf-8') as f:
    x = f.readlines()

data=str(x)
type(data)

tokenizer = Tokenizer()
tokenizer.fit_on_texts([data])
encoded = tokenizer.texts_to_sequences([data])[0]
# retrieve vocabulary size
vocab_size = len(tokenizer.word_index) + 1
print('Vocabulary Size: %d' % vocab_size)

# encode 4 words -> 1 word
sequences = list()
for i in range(4, len(encoded)):
	sequence = encoded[i-4:i+1]
	sequences.append(sequence)
print('Total Sequences: %d' % len(sequences))

# pad sequences
max_length = max([len(seq) for seq in sequences])
sequences = pad_sequences(sequences, maxlen=max_length, padding='pre')
print('Max Sequence Length: %d' % max_length)

# split into input and output elements
sequences = np.array(sequences)
X, y = sequences[:,:-1],sequences[:,-1]
y = to_categorical(y, num_classes=vocab_size)

# define model
model = Sequential()
model.add(Embedding(vocab_size, 10, input_length=max_length-1))
model.add(LSTM(64))
model.add(Dense(vocab_size, activation='softmax'))
print(model.summary())

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(X, y, epochs=500, verbose=1)

model.fit(X, y, epochs=100, verbose=1)

def generate_seq(model, tokenizer, max_length, seed_text, n_words):
	in_text = seed_text
	# generate a fixed number of words
	for _ in range(n_words):
		# encode the text as integer
		encoded = tokenizer.texts_to_sequences([in_text])[0]
		# pre-pad sequences to a fixed length
		encoded = pad_sequences([encoded], maxlen=max_length, padding='pre')
		# predict probabilities for each word
		yhat = model.predict_classes(encoded, verbose=0)
		# map predicted word index to word
		out_word = ''
		for word, index in tokenizer.word_index.items():
			if index == yhat:
				out_word = word
				break
		# append to input
		in_text += ' ' + out_word
	return in_text

print(generate_seq(model, tokenizer, max_length-1, 'Mr. Bean ', 6))
print(generate_seq(model, tokenizer, max_length-1, 'A group of grave',8 ))
print(generate_seq(model, tokenizer, max_length-1, 'BEAN tries to cheer',12))

print(generate_seq(model, tokenizer, max_length-1, 'His eyes close, and',12))
print(generate_seq(model, tokenizer, max_length-1, 'His arm goes up',5))
print(generate_seq(model, tokenizer, max_length-1, 'BEAN then switches on',5))

